#! /usr/bin/env lua

-- This program sets pwm of Active thermal Solution for RockPro64
--
-- Nota :
-- Temperature can be more than real because of self heating
----------------------------------------------------------------------
-- Copyright (c) 2018 Carlos Domingues, aka tuxd3v <tuxd3v@sapo.pt>
--
 
-- Version String
VERSION = "0.2.0"

-- Print ATS Version, and exit..
if( arg[1] == "--version" or arg[1] == "-v" )
then
	print( "ATS --- Active Termal Service.." )
	print( "    --  Copyright © 2018 Carlos Domingues" )
	print( "    --  Version: " .. VERSION )
	os.exit( 0 )
end

--- Load System Configuration File
--
dofile("/etc/ats.conf")

----
---- Core Functions
---

--- Find Device sysfs location
--
function getConditions()
	local open   = io.open
 	local handle = open( SYSTEM.THERMAL0_CTL , "r")
 	local state  = 0
	if ( handle ~= nil )
	then
		handle:close()
	else
		SYSTEM.THERMAL0_CTL = "ERROR"
		state = 1
	end
 	handle = open( SYSTEM.THERMAL1_CTL , "r")
	if ( handle ~= nil )
	then
		handle:close()
	else
		SYSTEM.THERMAL1_CTL = "ERROR"
		state = 1
	end
 	handle = open( SYSTEM.PWM_CTL , "r")
	if ( handle ~= nil )
	then
		handle:close()
	else
		SYSTEM.PWM_CTL	= "ERROR"
		state = 1
	end
	if( state == 1 )
	then
		return false
	end
	return true
end

--- Set Fan PWM value[ integer ]
-- 
function setPwm( value )
	local handle = io.open( SYSTEM.PWM_CTL , "w")
	if ( handle ~= nil )
	then
		handle:write( value, "" )
		handle:close()
		return true
    end
    return false
end

--- Function to ShutDown..
--  Temp Above 'ABSOLUTE_MAX_THERMAL_TEMP'
function shutDown( seconds )
	os.execute( "sleep " .. seconds .. " && shutdown -h +0 \"Warning: Temperature **ABOVE** 'ABSOLUTE MAX THERMAL TEMP' ( " .. ABSOLUTE_MAX_THERMAL_TEMP .. "°C )\" &")
	io.write( string.format( "Warning: SHUTTING DOWN in 10s\n" ) )
	io.write( string.format( "Warning: Temperature **ABOVE** 'ABSOLUTE MAX THERMAL TEMP' (" .. ABSOLUTE_MAX_THERMAL_TEMP .. "°C )\n" ) )
	io.write( string.format( "Warning: Temperature **ABOVE** 'ABSOLUTE MAX THERMAL TEMP' (" .. ABSOLUTE_MAX_THERMAL_TEMP .. "°C )\n\nType 'shutdown -c' to cancel...\n" ) )
	io.write( string.format( "exit 1\n" ) )
end

----
---- Variables and Functions to Deamonize.
---

-- Will be used with SysVinit systems..
function createLock()
	local RETURN = "N/A"
	local handle = io.open( "/var/lock/fanctl.lock" , "r")
	if ( handle == nil )
	then
		handle:close()
		RETURN = os.execute("echo $BASHPID;")
		ppid   = tonumber( RETURN )
		handle = io.open( "/var/lock/fanctl.lock" , "w")
		handle:write( RETURN .. "" )
		handle:close()
		return 0
	end
	handle:close()
	return 1
end

----
---- MAIN ----
---

----
---- Check Configurations
--

-- if( createLock() == 1 ){
--	print( "ATS is already running.." )
--	print( "exit 1" )
--	os.exit(1);
--}

-- Check if Initial conditions are invalid
-- By that we mean if ATS, can properly support Active Thermal System, on the present SysFs..
if( getConditions() == false )
then
	io.write( string.format( "getConditions: Warning, Values { THERMAL0_CTL, THERMAL1_CTL, FAN_CTL }: %s, %s, %s\n", SYSTEM.THERMAL0_CTL, SYSTEM.THERMAL1_CTL, SYSTEM.PWM_CTL ))
	io.write( string.format( "exit 1\n" ) )
	os.exit( 1 )
end

---- Require ATS module, to dynamic lynk against..
--
require( "ats" );

-- Start Fan, by 2 diferent PWM duty cycle Power Steps .. 
setPwm( 130 )
mSleep( 200 )
setPwm( 190 )
sSleep( 1 );

-- Initialize ATS Backend
if ( initCore( SYSTEM ) == true )
then
	if ( arg[1] == "--test" or arg[1] == "-t" )
	then
		if ( chkSymlink( "/var/run/systemd/units/invocation:ats.service" ) ~= true )
		then
			-- start looping in verbose mode
			if( loop( true ) == false )
			then
				-- Temp outside Limits
				shutDown( 10 )
			end
				
		else
			print "Stop ATS Service first [ service ats stop ].."
		end
	else
		-- start looping in non-verbose mode
		if( loop( false ) == false )
		then
			-- Temp outside Limits
			shutDown( 10 )
		end
	end
end

--[[
	-- Function to calculate pwm values, using interpolated methods, for each profile
	getProfile_pwm	= function ( self, t )
				local p = self.FANSPEC
				if( p == "profile1" )
				then
					return self.ceil( 40 + ( 215 / 20 ) * ( t - 40 ) )
				elseif( p == "profile2" )
				then
					return self.ceil( 40 + ( 215 / 30 ) * ( t - 40 ) )
				elseif( p == "profile3" )
				then
					return self.ceil( 40 + ( 215 / 40 ) * ( t - 40 ) ) 
				end
	end,
]]
os.exit( 1 );
